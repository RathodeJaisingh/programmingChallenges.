import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;

public class setMisMatch {
    public static void main(String[] args) {
        //given input Array and exactly one element got duplicated replacing another number. so find it out which number is that
        //and return the Array with no duplicate elements

        //Assume input function has input
        //int[] arr = input();
        //below problem is solved in o(n) times, the space is compromised.

        //Method2
        //it would take O(nlogn) time complexity and it would be inplace algorithm
        // sort the given array using Quick sort or merge sort it would be sorted in O(logn)
        //search for the duplicate element, hence it is clear the given N elements are consicutive we would solve it in no time.

        int[] arr = {2,1,2,4,5};
        HashSet<Integer> hs = new HashSet<>();

        for(int i = 0; i < arr.length; i++) {
            if (hs.contains(arr[i])){
                for(int j = i ; j < arr.length; j++)
                {
                    if(hs.contains(arr[j] + 1));
                    else {
                        hs.add(arr[j] + 1);
                        arr[j] = arr[j]+1;
                        break;
                    }

                }
            }
           hs.add(arr[i]);
        }
        Iterator<Integer> iterator = hs.iterator();
        while(iterator.hasNext()) {
            System.out.print(iterator.next());
            System.out.print(" ");

        }
        /* for (Integer n : hs)
                System.out.println(n);*/
        System.out.println();
        for(int i =0 ; i < arr.length; i ++) {
            System.out.print(arr[i]+" ");
        }
    }

}
